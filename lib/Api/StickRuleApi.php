<?php
/**
 * StickRuleApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2.0
 * Contact: support@haproxy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * StickRuleApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StickRuleApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createStickRule
     *
     * Add a new Stick Rule
     *
     * @param  \Swagger\Client\Model\StickRule $body body (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\StickRule
     */
    public function createStickRule($body, $backend, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        list($response) = $this->createStickRuleWithHttpInfo($body, $backend, $transaction_id, $version, $force_reload);
        return $response;
    }

    /**
     * Operation createStickRuleWithHttpInfo
     *
     * Add a new Stick Rule
     *
     * @param  \Swagger\Client\Model\StickRule $body (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\StickRule, HTTP status code, HTTP response headers (array of strings)
     */
    public function createStickRuleWithHttpInfo($body, $backend, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        $returnType = '\Swagger\Client\Model\StickRule';
        $request = $this->createStickRuleRequest($body, $backend, $transaction_id, $version, $force_reload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StickRule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StickRule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createStickRuleAsync
     *
     * Add a new Stick Rule
     *
     * @param  \Swagger\Client\Model\StickRule $body (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStickRuleAsync($body, $backend, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        return $this->createStickRuleAsyncWithHttpInfo($body, $backend, $transaction_id, $version, $force_reload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createStickRuleAsyncWithHttpInfo
     *
     * Add a new Stick Rule
     *
     * @param  \Swagger\Client\Model\StickRule $body (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStickRuleAsyncWithHttpInfo($body, $backend, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        $returnType = '\Swagger\Client\Model\StickRule';
        $request = $this->createStickRuleRequest($body, $backend, $transaction_id, $version, $force_reload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createStickRule'
     *
     * @param  \Swagger\Client\Model\StickRule $body (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createStickRuleRequest($body, $backend, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createStickRule'
            );
        }
        // verify the required parameter 'backend' is set
        if ($backend === null || (is_array($backend) && count($backend) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $backend when calling createStickRule'
            );
        }

        $resourcePath = '/services/haproxy/configuration/stick_rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($backend !== null) {
            $queryParams['backend'] = ObjectSerializer::toQueryValue($backend);
        }
        // query params
        if ($transaction_id !== null) {
            $queryParams['transaction_id'] = ObjectSerializer::toQueryValue($transaction_id);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($force_reload !== null) {
            $queryParams['force_reload'] = ObjectSerializer::toQueryValue($force_reload);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteStickRule
     *
     * Delete a Stick Rule
     *
     * @param  int $id Stick Rule ID (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteStickRule($id, $backend, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        $this->deleteStickRuleWithHttpInfo($id, $backend, $transaction_id, $version, $force_reload);
    }

    /**
     * Operation deleteStickRuleWithHttpInfo
     *
     * Delete a Stick Rule
     *
     * @param  int $id Stick Rule ID (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteStickRuleWithHttpInfo($id, $backend, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        $returnType = '';
        $request = $this->deleteStickRuleRequest($id, $backend, $transaction_id, $version, $force_reload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteStickRuleAsync
     *
     * Delete a Stick Rule
     *
     * @param  int $id Stick Rule ID (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStickRuleAsync($id, $backend, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        return $this->deleteStickRuleAsyncWithHttpInfo($id, $backend, $transaction_id, $version, $force_reload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteStickRuleAsyncWithHttpInfo
     *
     * Delete a Stick Rule
     *
     * @param  int $id Stick Rule ID (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStickRuleAsyncWithHttpInfo($id, $backend, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        $returnType = '';
        $request = $this->deleteStickRuleRequest($id, $backend, $transaction_id, $version, $force_reload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteStickRule'
     *
     * @param  int $id Stick Rule ID (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteStickRuleRequest($id, $backend, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteStickRule'
            );
        }
        // verify the required parameter 'backend' is set
        if ($backend === null || (is_array($backend) && count($backend) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $backend when calling deleteStickRule'
            );
        }

        $resourcePath = '/services/haproxy/configuration/stick_rules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($backend !== null) {
            $queryParams['backend'] = ObjectSerializer::toQueryValue($backend);
        }
        // query params
        if ($transaction_id !== null) {
            $queryParams['transaction_id'] = ObjectSerializer::toQueryValue($transaction_id);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($force_reload !== null) {
            $queryParams['force_reload'] = ObjectSerializer::toQueryValue($force_reload);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStickRule
     *
     * Return one Stick Rule
     *
     * @param  int $id Stick Rule ID (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20027
     */
    public function getStickRule($id, $backend, $transaction_id = null)
    {
        list($response) = $this->getStickRuleWithHttpInfo($id, $backend, $transaction_id);
        return $response;
    }

    /**
     * Operation getStickRuleWithHttpInfo
     *
     * Return one Stick Rule
     *
     * @param  int $id Stick Rule ID (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20027, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStickRuleWithHttpInfo($id, $backend, $transaction_id = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20027';
        $request = $this->getStickRuleRequest($id, $backend, $transaction_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20027',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStickRuleAsync
     *
     * Return one Stick Rule
     *
     * @param  int $id Stick Rule ID (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStickRuleAsync($id, $backend, $transaction_id = null)
    {
        return $this->getStickRuleAsyncWithHttpInfo($id, $backend, $transaction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStickRuleAsyncWithHttpInfo
     *
     * Return one Stick Rule
     *
     * @param  int $id Stick Rule ID (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStickRuleAsyncWithHttpInfo($id, $backend, $transaction_id = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20027';
        $request = $this->getStickRuleRequest($id, $backend, $transaction_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStickRule'
     *
     * @param  int $id Stick Rule ID (required)
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStickRuleRequest($id, $backend, $transaction_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStickRule'
            );
        }
        // verify the required parameter 'backend' is set
        if ($backend === null || (is_array($backend) && count($backend) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $backend when calling getStickRule'
            );
        }

        $resourcePath = '/services/haproxy/configuration/stick_rules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($backend !== null) {
            $queryParams['backend'] = ObjectSerializer::toQueryValue($backend);
        }
        // query params
        if ($transaction_id !== null) {
            $queryParams['transaction_id'] = ObjectSerializer::toQueryValue($transaction_id);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStickRules
     *
     * Return an array of all Stick Rules
     *
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20026
     */
    public function getStickRules($backend, $transaction_id = null)
    {
        list($response) = $this->getStickRulesWithHttpInfo($backend, $transaction_id);
        return $response;
    }

    /**
     * Operation getStickRulesWithHttpInfo
     *
     * Return an array of all Stick Rules
     *
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20026, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStickRulesWithHttpInfo($backend, $transaction_id = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20026';
        $request = $this->getStickRulesRequest($backend, $transaction_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20026',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStickRulesAsync
     *
     * Return an array of all Stick Rules
     *
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStickRulesAsync($backend, $transaction_id = null)
    {
        return $this->getStickRulesAsyncWithHttpInfo($backend, $transaction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStickRulesAsyncWithHttpInfo
     *
     * Return an array of all Stick Rules
     *
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStickRulesAsyncWithHttpInfo($backend, $transaction_id = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20026';
        $request = $this->getStickRulesRequest($backend, $transaction_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStickRules'
     *
     * @param  string $backend Backend name (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStickRulesRequest($backend, $transaction_id = null)
    {
        // verify the required parameter 'backend' is set
        if ($backend === null || (is_array($backend) && count($backend) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $backend when calling getStickRules'
            );
        }

        $resourcePath = '/services/haproxy/configuration/stick_rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($backend !== null) {
            $queryParams['backend'] = ObjectSerializer::toQueryValue($backend);
        }
        // query params
        if ($transaction_id !== null) {
            $queryParams['transaction_id'] = ObjectSerializer::toQueryValue($transaction_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceStickRule
     *
     * Replace a Stick Rule
     *
     * @param  \Swagger\Client\Model\StickRule $body body (required)
     * @param  string $backend Backend name (required)
     * @param  int $id Stick Rule ID (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\StickRule
     */
    public function replaceStickRule($body, $backend, $id, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        list($response) = $this->replaceStickRuleWithHttpInfo($body, $backend, $id, $transaction_id, $version, $force_reload);
        return $response;
    }

    /**
     * Operation replaceStickRuleWithHttpInfo
     *
     * Replace a Stick Rule
     *
     * @param  \Swagger\Client\Model\StickRule $body (required)
     * @param  string $backend Backend name (required)
     * @param  int $id Stick Rule ID (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\StickRule, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceStickRuleWithHttpInfo($body, $backend, $id, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        $returnType = '\Swagger\Client\Model\StickRule';
        $request = $this->replaceStickRuleRequest($body, $backend, $id, $transaction_id, $version, $force_reload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StickRule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\StickRule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceStickRuleAsync
     *
     * Replace a Stick Rule
     *
     * @param  \Swagger\Client\Model\StickRule $body (required)
     * @param  string $backend Backend name (required)
     * @param  int $id Stick Rule ID (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceStickRuleAsync($body, $backend, $id, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        return $this->replaceStickRuleAsyncWithHttpInfo($body, $backend, $id, $transaction_id, $version, $force_reload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceStickRuleAsyncWithHttpInfo
     *
     * Replace a Stick Rule
     *
     * @param  \Swagger\Client\Model\StickRule $body (required)
     * @param  string $backend Backend name (required)
     * @param  int $id Stick Rule ID (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceStickRuleAsyncWithHttpInfo($body, $backend, $id, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        $returnType = '\Swagger\Client\Model\StickRule';
        $request = $this->replaceStickRuleRequest($body, $backend, $id, $transaction_id, $version, $force_reload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceStickRule'
     *
     * @param  \Swagger\Client\Model\StickRule $body (required)
     * @param  string $backend Backend name (required)
     * @param  int $id Stick Rule ID (required)
     * @param  string $transaction_id ID of the transaction where we want to add the operation. Cannot be used when version is specified. (optional)
     * @param  int $version Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it&#x27;s own version. (optional)
     * @param  bool $force_reload If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceStickRuleRequest($body, $backend, $id, $transaction_id = null, $version = null, $force_reload = 'false')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling replaceStickRule'
            );
        }
        // verify the required parameter 'backend' is set
        if ($backend === null || (is_array($backend) && count($backend) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $backend when calling replaceStickRule'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling replaceStickRule'
            );
        }

        $resourcePath = '/services/haproxy/configuration/stick_rules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($backend !== null) {
            $queryParams['backend'] = ObjectSerializer::toQueryValue($backend);
        }
        // query params
        if ($transaction_id !== null) {
            $queryParams['transaction_id'] = ObjectSerializer::toQueryValue($transaction_id);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($force_reload !== null) {
            $queryParams['force_reload'] = ObjectSerializer::toQueryValue($force_reload);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
