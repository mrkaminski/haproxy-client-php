<?php
/**
 * Server
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2.0
 * Contact: support@haproxy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Server Class Doc Comment
 *
 * @category Class
 * @description HAProxy backend server configuration
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Server implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'server';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
'agent_addr' => 'string',
'agent_check' => 'string',
'agent_inter' => 'int',
'agent_port' => 'int',
'agent_send' => 'string',
'allow_0rtt' => 'bool',
'backup' => 'string',
'check' => 'string',
'check_sni' => 'string',
'check_ssl' => 'string',
'cookie' => 'string',
'downinter' => 'int',
'fastinter' => 'int',
'health_check_port' => 'int',
'init_addr' => 'string',
'inter' => 'int',
'maintenance' => 'string',
'maxconn' => 'int',
'name' => 'string',
'on_error' => 'string',
'on_marked_down' => 'string',
'on_marked_up' => 'string',
'port' => 'int',
'send_proxy' => 'string',
'send_proxy_v2' => 'string',
'sni' => 'string',
'ssl' => 'string',
'ssl_cafile' => 'string',
'ssl_certificate' => 'string',
'tls_tickets' => 'string',
'verify' => 'string',
'weight' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
'agent_addr' => null,
'agent_check' => null,
'agent_inter' => null,
'agent_port' => null,
'agent_send' => null,
'allow_0rtt' => null,
'backup' => null,
'check' => null,
'check_sni' => null,
'check_ssl' => null,
'cookie' => null,
'downinter' => null,
'fastinter' => null,
'health_check_port' => null,
'init_addr' => null,
'inter' => null,
'maintenance' => null,
'maxconn' => null,
'name' => null,
'on_error' => null,
'on_marked_down' => null,
'on_marked_up' => null,
'port' => null,
'send_proxy' => null,
'send_proxy_v2' => null,
'sni' => null,
'ssl' => null,
'ssl_cafile' => null,
'ssl_certificate' => null,
'tls_tickets' => null,
'verify' => null,
'weight' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
'agent_addr' => 'agent-addr',
'agent_check' => 'agent-check',
'agent_inter' => 'agent-inter',
'agent_port' => 'agent-port',
'agent_send' => 'agent-send',
'allow_0rtt' => 'allow_0rtt',
'backup' => 'backup',
'check' => 'check',
'check_sni' => 'check-sni',
'check_ssl' => 'check-ssl',
'cookie' => 'cookie',
'downinter' => 'downinter',
'fastinter' => 'fastinter',
'health_check_port' => 'health_check_port',
'init_addr' => 'init-addr',
'inter' => 'inter',
'maintenance' => 'maintenance',
'maxconn' => 'maxconn',
'name' => 'name',
'on_error' => 'on-error',
'on_marked_down' => 'on-marked-down',
'on_marked_up' => 'on-marked-up',
'port' => 'port',
'send_proxy' => 'send-proxy',
'send_proxy_v2' => 'send-proxy-v2',
'sni' => 'sni',
'ssl' => 'ssl',
'ssl_cafile' => 'ssl_cafile',
'ssl_certificate' => 'ssl_certificate',
'tls_tickets' => 'tls_tickets',
'verify' => 'verify',
'weight' => 'weight'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
'agent_addr' => 'setAgentAddr',
'agent_check' => 'setAgentCheck',
'agent_inter' => 'setAgentInter',
'agent_port' => 'setAgentPort',
'agent_send' => 'setAgentSend',
'allow_0rtt' => 'setAllow0rtt',
'backup' => 'setBackup',
'check' => 'setCheck',
'check_sni' => 'setCheckSni',
'check_ssl' => 'setCheckSsl',
'cookie' => 'setCookie',
'downinter' => 'setDowninter',
'fastinter' => 'setFastinter',
'health_check_port' => 'setHealthCheckPort',
'init_addr' => 'setInitAddr',
'inter' => 'setInter',
'maintenance' => 'setMaintenance',
'maxconn' => 'setMaxconn',
'name' => 'setName',
'on_error' => 'setOnError',
'on_marked_down' => 'setOnMarkedDown',
'on_marked_up' => 'setOnMarkedUp',
'port' => 'setPort',
'send_proxy' => 'setSendProxy',
'send_proxy_v2' => 'setSendProxyV2',
'sni' => 'setSni',
'ssl' => 'setSsl',
'ssl_cafile' => 'setSslCafile',
'ssl_certificate' => 'setSslCertificate',
'tls_tickets' => 'setTlsTickets',
'verify' => 'setVerify',
'weight' => 'setWeight'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
'agent_addr' => 'getAgentAddr',
'agent_check' => 'getAgentCheck',
'agent_inter' => 'getAgentInter',
'agent_port' => 'getAgentPort',
'agent_send' => 'getAgentSend',
'allow_0rtt' => 'getAllow0rtt',
'backup' => 'getBackup',
'check' => 'getCheck',
'check_sni' => 'getCheckSni',
'check_ssl' => 'getCheckSsl',
'cookie' => 'getCookie',
'downinter' => 'getDowninter',
'fastinter' => 'getFastinter',
'health_check_port' => 'getHealthCheckPort',
'init_addr' => 'getInitAddr',
'inter' => 'getInter',
'maintenance' => 'getMaintenance',
'maxconn' => 'getMaxconn',
'name' => 'getName',
'on_error' => 'getOnError',
'on_marked_down' => 'getOnMarkedDown',
'on_marked_up' => 'getOnMarkedUp',
'port' => 'getPort',
'send_proxy' => 'getSendProxy',
'send_proxy_v2' => 'getSendProxyV2',
'sni' => 'getSni',
'ssl' => 'getSsl',
'ssl_cafile' => 'getSslCafile',
'ssl_certificate' => 'getSslCertificate',
'tls_tickets' => 'getTlsTickets',
'verify' => 'getVerify',
'weight' => 'getWeight'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AGENT_CHECK_ENABLED = 'enabled';
const AGENT_CHECK_DISABLED = 'disabled';
const BACKUP_ENABLED = 'enabled';
const BACKUP_DISABLED = 'disabled';
const CHECK_ENABLED = 'enabled';
const CHECK_DISABLED = 'disabled';
const CHECK_SSL_ENABLED = 'enabled';
const CHECK_SSL_DISABLED = 'disabled';
const MAINTENANCE_ENABLED = 'enabled';
const MAINTENANCE_DISABLED = 'disabled';
const ON_ERROR_FASTINTER = 'fastinter';
const ON_ERROR_FAIL_CHECK = 'fail-check';
const ON_ERROR_SUDDEN_DEATH = 'sudden-death';
const ON_ERROR_MARK_DOWN = 'mark-down';
const ON_MARKED_DOWN_SESSIONS = 'shutdown-sessions';
const ON_MARKED_UP_SESSIONS = 'shutdown-backup-sessions';
const SEND_PROXY_ENABLED = 'enabled';
const SEND_PROXY_DISABLED = 'disabled';
const SEND_PROXY_V2_ENABLED = 'enabled';
const SEND_PROXY_V2_DISABLED = 'disabled';
const SSL_ENABLED = 'enabled';
const SSL_DISABLED = 'disabled';
const TLS_TICKETS_ENABLED = 'enabled';
const TLS_TICKETS_DISABLED = 'disabled';
const VERIFY_NONE = 'none';
const VERIFY_REQUIRED = 'required';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAgentCheckAllowableValues()
    {
        return [
            self::AGENT_CHECK_ENABLED,
self::AGENT_CHECK_DISABLED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBackupAllowableValues()
    {
        return [
            self::BACKUP_ENABLED,
self::BACKUP_DISABLED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckAllowableValues()
    {
        return [
            self::CHECK_ENABLED,
self::CHECK_DISABLED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckSslAllowableValues()
    {
        return [
            self::CHECK_SSL_ENABLED,
self::CHECK_SSL_DISABLED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaintenanceAllowableValues()
    {
        return [
            self::MAINTENANCE_ENABLED,
self::MAINTENANCE_DISABLED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOnErrorAllowableValues()
    {
        return [
            self::ON_ERROR_FASTINTER,
self::ON_ERROR_FAIL_CHECK,
self::ON_ERROR_SUDDEN_DEATH,
self::ON_ERROR_MARK_DOWN,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOnMarkedDownAllowableValues()
    {
        return [
            self::ON_MARKED_DOWN_SESSIONS,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOnMarkedUpAllowableValues()
    {
        return [
            self::ON_MARKED_UP_SESSIONS,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendProxyAllowableValues()
    {
        return [
            self::SEND_PROXY_ENABLED,
self::SEND_PROXY_DISABLED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendProxyV2AllowableValues()
    {
        return [
            self::SEND_PROXY_V2_ENABLED,
self::SEND_PROXY_V2_DISABLED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslAllowableValues()
    {
        return [
            self::SSL_ENABLED,
self::SSL_DISABLED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTlsTicketsAllowableValues()
    {
        return [
            self::TLS_TICKETS_ENABLED,
self::TLS_TICKETS_DISABLED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerifyAllowableValues()
    {
        return [
            self::VERIFY_NONE,
self::VERIFY_REQUIRED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['agent_addr'] = isset($data['agent_addr']) ? $data['agent_addr'] : null;
        $this->container['agent_check'] = isset($data['agent_check']) ? $data['agent_check'] : null;
        $this->container['agent_inter'] = isset($data['agent_inter']) ? $data['agent_inter'] : null;
        $this->container['agent_port'] = isset($data['agent_port']) ? $data['agent_port'] : null;
        $this->container['agent_send'] = isset($data['agent_send']) ? $data['agent_send'] : null;
        $this->container['allow_0rtt'] = isset($data['allow_0rtt']) ? $data['allow_0rtt'] : null;
        $this->container['backup'] = isset($data['backup']) ? $data['backup'] : null;
        $this->container['check'] = isset($data['check']) ? $data['check'] : null;
        $this->container['check_sni'] = isset($data['check_sni']) ? $data['check_sni'] : null;
        $this->container['check_ssl'] = isset($data['check_ssl']) ? $data['check_ssl'] : null;
        $this->container['cookie'] = isset($data['cookie']) ? $data['cookie'] : null;
        $this->container['downinter'] = isset($data['downinter']) ? $data['downinter'] : null;
        $this->container['fastinter'] = isset($data['fastinter']) ? $data['fastinter'] : null;
        $this->container['health_check_port'] = isset($data['health_check_port']) ? $data['health_check_port'] : null;
        $this->container['init_addr'] = isset($data['init_addr']) ? $data['init_addr'] : null;
        $this->container['inter'] = isset($data['inter']) ? $data['inter'] : null;
        $this->container['maintenance'] = isset($data['maintenance']) ? $data['maintenance'] : null;
        $this->container['maxconn'] = isset($data['maxconn']) ? $data['maxconn'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['on_error'] = isset($data['on_error']) ? $data['on_error'] : null;
        $this->container['on_marked_down'] = isset($data['on_marked_down']) ? $data['on_marked_down'] : null;
        $this->container['on_marked_up'] = isset($data['on_marked_up']) ? $data['on_marked_up'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['send_proxy'] = isset($data['send_proxy']) ? $data['send_proxy'] : null;
        $this->container['send_proxy_v2'] = isset($data['send_proxy_v2']) ? $data['send_proxy_v2'] : null;
        $this->container['sni'] = isset($data['sni']) ? $data['sni'] : null;
        $this->container['ssl'] = isset($data['ssl']) ? $data['ssl'] : null;
        $this->container['ssl_cafile'] = isset($data['ssl_cafile']) ? $data['ssl_cafile'] : null;
        $this->container['ssl_certificate'] = isset($data['ssl_certificate']) ? $data['ssl_certificate'] : null;
        $this->container['tls_tickets'] = isset($data['tls_tickets']) ? $data['tls_tickets'] : null;
        $this->container['verify'] = isset($data['verify']) ? $data['verify'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAgentCheckAllowableValues();
        if (!is_null($this->container['agent_check']) && !in_array($this->container['agent_check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'agent_check', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBackupAllowableValues();
        if (!is_null($this->container['backup']) && !in_array($this->container['backup'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'backup', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCheckAllowableValues();
        if (!is_null($this->container['check']) && !in_array($this->container['check'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'check', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCheckSslAllowableValues();
        if (!is_null($this->container['check_ssl']) && !in_array($this->container['check_ssl'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'check_ssl', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMaintenanceAllowableValues();
        if (!is_null($this->container['maintenance']) && !in_array($this->container['maintenance'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'maintenance', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getOnErrorAllowableValues();
        if (!is_null($this->container['on_error']) && !in_array($this->container['on_error'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'on_error', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOnMarkedDownAllowableValues();
        if (!is_null($this->container['on_marked_down']) && !in_array($this->container['on_marked_down'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'on_marked_down', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOnMarkedUpAllowableValues();
        if (!is_null($this->container['on_marked_up']) && !in_array($this->container['on_marked_up'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'on_marked_up', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSendProxyAllowableValues();
        if (!is_null($this->container['send_proxy']) && !in_array($this->container['send_proxy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'send_proxy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSendProxyV2AllowableValues();
        if (!is_null($this->container['send_proxy_v2']) && !in_array($this->container['send_proxy_v2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'send_proxy_v2', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslAllowableValues();
        if (!is_null($this->container['ssl']) && !in_array($this->container['ssl'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ssl', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTlsTicketsAllowableValues();
        if (!is_null($this->container['tls_tickets']) && !in_array($this->container['tls_tickets'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tls_tickets', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVerifyAllowableValues();
        if (!is_null($this->container['verify']) && !in_array($this->container['verify'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'verify', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets agent_addr
     *
     * @return string
     */
    public function getAgentAddr()
    {
        return $this->container['agent_addr'];
    }

    /**
     * Sets agent_addr
     *
     * @param string $agent_addr agent_addr
     *
     * @return $this
     */
    public function setAgentAddr($agent_addr)
    {
        $this->container['agent_addr'] = $agent_addr;

        return $this;
    }

    /**
     * Gets agent_check
     *
     * @return string
     */
    public function getAgentCheck()
    {
        return $this->container['agent_check'];
    }

    /**
     * Sets agent_check
     *
     * @param string $agent_check agent_check
     *
     * @return $this
     */
    public function setAgentCheck($agent_check)
    {
        $allowedValues = $this->getAgentCheckAllowableValues();
        if (!is_null($agent_check) && !in_array($agent_check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'agent_check', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['agent_check'] = $agent_check;

        return $this;
    }

    /**
     * Gets agent_inter
     *
     * @return int
     */
    public function getAgentInter()
    {
        return $this->container['agent_inter'];
    }

    /**
     * Sets agent_inter
     *
     * @param int $agent_inter agent_inter
     *
     * @return $this
     */
    public function setAgentInter($agent_inter)
    {
        $this->container['agent_inter'] = $agent_inter;

        return $this;
    }

    /**
     * Gets agent_port
     *
     * @return int
     */
    public function getAgentPort()
    {
        return $this->container['agent_port'];
    }

    /**
     * Sets agent_port
     *
     * @param int $agent_port agent_port
     *
     * @return $this
     */
    public function setAgentPort($agent_port)
    {
        $this->container['agent_port'] = $agent_port;

        return $this;
    }

    /**
     * Gets agent_send
     *
     * @return string
     */
    public function getAgentSend()
    {
        return $this->container['agent_send'];
    }

    /**
     * Sets agent_send
     *
     * @param string $agent_send agent_send
     *
     * @return $this
     */
    public function setAgentSend($agent_send)
    {
        $this->container['agent_send'] = $agent_send;

        return $this;
    }

    /**
     * Gets allow_0rtt
     *
     * @return bool
     */
    public function getAllow0rtt()
    {
        return $this->container['allow_0rtt'];
    }

    /**
     * Sets allow_0rtt
     *
     * @param bool $allow_0rtt allow_0rtt
     *
     * @return $this
     */
    public function setAllow0rtt($allow_0rtt)
    {
        $this->container['allow_0rtt'] = $allow_0rtt;

        return $this;
    }

    /**
     * Gets backup
     *
     * @return string
     */
    public function getBackup()
    {
        return $this->container['backup'];
    }

    /**
     * Sets backup
     *
     * @param string $backup backup
     *
     * @return $this
     */
    public function setBackup($backup)
    {
        $allowedValues = $this->getBackupAllowableValues();
        if (!is_null($backup) && !in_array($backup, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'backup', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['backup'] = $backup;

        return $this;
    }

    /**
     * Gets check
     *
     * @return string
     */
    public function getCheck()
    {
        return $this->container['check'];
    }

    /**
     * Sets check
     *
     * @param string $check check
     *
     * @return $this
     */
    public function setCheck($check)
    {
        $allowedValues = $this->getCheckAllowableValues();
        if (!is_null($check) && !in_array($check, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'check', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['check'] = $check;

        return $this;
    }

    /**
     * Gets check_sni
     *
     * @return string
     */
    public function getCheckSni()
    {
        return $this->container['check_sni'];
    }

    /**
     * Sets check_sni
     *
     * @param string $check_sni check_sni
     *
     * @return $this
     */
    public function setCheckSni($check_sni)
    {
        $this->container['check_sni'] = $check_sni;

        return $this;
    }

    /**
     * Gets check_ssl
     *
     * @return string
     */
    public function getCheckSsl()
    {
        return $this->container['check_ssl'];
    }

    /**
     * Sets check_ssl
     *
     * @param string $check_ssl check_ssl
     *
     * @return $this
     */
    public function setCheckSsl($check_ssl)
    {
        $allowedValues = $this->getCheckSslAllowableValues();
        if (!is_null($check_ssl) && !in_array($check_ssl, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'check_ssl', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['check_ssl'] = $check_ssl;

        return $this;
    }

    /**
     * Gets cookie
     *
     * @return string
     */
    public function getCookie()
    {
        return $this->container['cookie'];
    }

    /**
     * Sets cookie
     *
     * @param string $cookie cookie
     *
     * @return $this
     */
    public function setCookie($cookie)
    {
        $this->container['cookie'] = $cookie;

        return $this;
    }

    /**
     * Gets downinter
     *
     * @return int
     */
    public function getDowninter()
    {
        return $this->container['downinter'];
    }

    /**
     * Sets downinter
     *
     * @param int $downinter downinter
     *
     * @return $this
     */
    public function setDowninter($downinter)
    {
        $this->container['downinter'] = $downinter;

        return $this;
    }

    /**
     * Gets fastinter
     *
     * @return int
     */
    public function getFastinter()
    {
        return $this->container['fastinter'];
    }

    /**
     * Sets fastinter
     *
     * @param int $fastinter fastinter
     *
     * @return $this
     */
    public function setFastinter($fastinter)
    {
        $this->container['fastinter'] = $fastinter;

        return $this;
    }

    /**
     * Gets health_check_port
     *
     * @return int
     */
    public function getHealthCheckPort()
    {
        return $this->container['health_check_port'];
    }

    /**
     * Sets health_check_port
     *
     * @param int $health_check_port health_check_port
     *
     * @return $this
     */
    public function setHealthCheckPort($health_check_port)
    {
        $this->container['health_check_port'] = $health_check_port;

        return $this;
    }

    /**
     * Gets init_addr
     *
     * @return string
     */
    public function getInitAddr()
    {
        return $this->container['init_addr'];
    }

    /**
     * Sets init_addr
     *
     * @param string $init_addr init_addr
     *
     * @return $this
     */
    public function setInitAddr($init_addr)
    {
        $this->container['init_addr'] = $init_addr;

        return $this;
    }

    /**
     * Gets inter
     *
     * @return int
     */
    public function getInter()
    {
        return $this->container['inter'];
    }

    /**
     * Sets inter
     *
     * @param int $inter inter
     *
     * @return $this
     */
    public function setInter($inter)
    {
        $this->container['inter'] = $inter;

        return $this;
    }

    /**
     * Gets maintenance
     *
     * @return string
     */
    public function getMaintenance()
    {
        return $this->container['maintenance'];
    }

    /**
     * Sets maintenance
     *
     * @param string $maintenance maintenance
     *
     * @return $this
     */
    public function setMaintenance($maintenance)
    {
        $allowedValues = $this->getMaintenanceAllowableValues();
        if (!is_null($maintenance) && !in_array($maintenance, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'maintenance', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['maintenance'] = $maintenance;

        return $this;
    }

    /**
     * Gets maxconn
     *
     * @return int
     */
    public function getMaxconn()
    {
        return $this->container['maxconn'];
    }

    /**
     * Sets maxconn
     *
     * @param int $maxconn maxconn
     *
     * @return $this
     */
    public function setMaxconn($maxconn)
    {
        $this->container['maxconn'] = $maxconn;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets on_error
     *
     * @return string
     */
    public function getOnError()
    {
        return $this->container['on_error'];
    }

    /**
     * Sets on_error
     *
     * @param string $on_error on_error
     *
     * @return $this
     */
    public function setOnError($on_error)
    {
        $allowedValues = $this->getOnErrorAllowableValues();
        if (!is_null($on_error) && !in_array($on_error, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'on_error', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['on_error'] = $on_error;

        return $this;
    }

    /**
     * Gets on_marked_down
     *
     * @return string
     */
    public function getOnMarkedDown()
    {
        return $this->container['on_marked_down'];
    }

    /**
     * Sets on_marked_down
     *
     * @param string $on_marked_down on_marked_down
     *
     * @return $this
     */
    public function setOnMarkedDown($on_marked_down)
    {
        $allowedValues = $this->getOnMarkedDownAllowableValues();
        if (!is_null($on_marked_down) && !in_array($on_marked_down, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'on_marked_down', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['on_marked_down'] = $on_marked_down;

        return $this;
    }

    /**
     * Gets on_marked_up
     *
     * @return string
     */
    public function getOnMarkedUp()
    {
        return $this->container['on_marked_up'];
    }

    /**
     * Sets on_marked_up
     *
     * @param string $on_marked_up on_marked_up
     *
     * @return $this
     */
    public function setOnMarkedUp($on_marked_up)
    {
        $allowedValues = $this->getOnMarkedUpAllowableValues();
        if (!is_null($on_marked_up) && !in_array($on_marked_up, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'on_marked_up', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['on_marked_up'] = $on_marked_up;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets send_proxy
     *
     * @return string
     */
    public function getSendProxy()
    {
        return $this->container['send_proxy'];
    }

    /**
     * Sets send_proxy
     *
     * @param string $send_proxy send_proxy
     *
     * @return $this
     */
    public function setSendProxy($send_proxy)
    {
        $allowedValues = $this->getSendProxyAllowableValues();
        if (!is_null($send_proxy) && !in_array($send_proxy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'send_proxy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_proxy'] = $send_proxy;

        return $this;
    }

    /**
     * Gets send_proxy_v2
     *
     * @return string
     */
    public function getSendProxyV2()
    {
        return $this->container['send_proxy_v2'];
    }

    /**
     * Sets send_proxy_v2
     *
     * @param string $send_proxy_v2 send_proxy_v2
     *
     * @return $this
     */
    public function setSendProxyV2($send_proxy_v2)
    {
        $allowedValues = $this->getSendProxyV2AllowableValues();
        if (!is_null($send_proxy_v2) && !in_array($send_proxy_v2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'send_proxy_v2', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_proxy_v2'] = $send_proxy_v2;

        return $this;
    }

    /**
     * Gets sni
     *
     * @return string
     */
    public function getSni()
    {
        return $this->container['sni'];
    }

    /**
     * Sets sni
     *
     * @param string $sni sni
     *
     * @return $this
     */
    public function setSni($sni)
    {
        $this->container['sni'] = $sni;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return string
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param string $ssl ssl
     *
     * @return $this
     */
    public function setSsl($ssl)
    {
        $allowedValues = $this->getSslAllowableValues();
        if (!is_null($ssl) && !in_array($ssl, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ssl', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets ssl_cafile
     *
     * @return string
     */
    public function getSslCafile()
    {
        return $this->container['ssl_cafile'];
    }

    /**
     * Sets ssl_cafile
     *
     * @param string $ssl_cafile ssl_cafile
     *
     * @return $this
     */
    public function setSslCafile($ssl_cafile)
    {
        $this->container['ssl_cafile'] = $ssl_cafile;

        return $this;
    }

    /**
     * Gets ssl_certificate
     *
     * @return string
     */
    public function getSslCertificate()
    {
        return $this->container['ssl_certificate'];
    }

    /**
     * Sets ssl_certificate
     *
     * @param string $ssl_certificate ssl_certificate
     *
     * @return $this
     */
    public function setSslCertificate($ssl_certificate)
    {
        $this->container['ssl_certificate'] = $ssl_certificate;

        return $this;
    }

    /**
     * Gets tls_tickets
     *
     * @return string
     */
    public function getTlsTickets()
    {
        return $this->container['tls_tickets'];
    }

    /**
     * Sets tls_tickets
     *
     * @param string $tls_tickets tls_tickets
     *
     * @return $this
     */
    public function setTlsTickets($tls_tickets)
    {
        $allowedValues = $this->getTlsTicketsAllowableValues();
        if (!is_null($tls_tickets) && !in_array($tls_tickets, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tls_tickets', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tls_tickets'] = $tls_tickets;

        return $this;
    }

    /**
     * Gets verify
     *
     * @return string
     */
    public function getVerify()
    {
        return $this->container['verify'];
    }

    /**
     * Sets verify
     *
     * @param string $verify verify
     *
     * @return $this
     */
    public function setVerify($verify)
    {
        $allowedValues = $this->getVerifyAllowableValues();
        if (!is_null($verify) && !in_array($verify, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'verify', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verify'] = $verify;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
