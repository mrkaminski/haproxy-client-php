<?php
/**
 * RuntimeServer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2.0
 * Contact: support@haproxy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RuntimeServer Class Doc Comment
 *
 * @category Class
 * @description Runtime transient server properties
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RuntimeServer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'runtime_server';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
'admin_state' => 'string',
'id' => 'string',
'name' => 'string',
'operational_state' => 'string',
'port' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
'admin_state' => null,
'id' => null,
'name' => null,
'operational_state' => null,
'port' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
'admin_state' => 'admin_state',
'id' => 'id',
'name' => 'name',
'operational_state' => 'operational_state',
'port' => 'port'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
'admin_state' => 'setAdminState',
'id' => 'setId',
'name' => 'setName',
'operational_state' => 'setOperationalState',
'port' => 'setPort'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
'admin_state' => 'getAdminState',
'id' => 'getId',
'name' => 'getName',
'operational_state' => 'getOperationalState',
'port' => 'getPort'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ADMIN_STATE_READY = 'ready';
const ADMIN_STATE_MAINT = 'maint';
const ADMIN_STATE_DRAIN = 'drain';
const OPERATIONAL_STATE_UP = 'up';
const OPERATIONAL_STATE_DOWN = 'down';
const OPERATIONAL_STATE_STOPPING = 'stopping';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminStateAllowableValues()
    {
        return [
            self::ADMIN_STATE_READY,
self::ADMIN_STATE_MAINT,
self::ADMIN_STATE_DRAIN,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationalStateAllowableValues()
    {
        return [
            self::OPERATIONAL_STATE_UP,
self::OPERATIONAL_STATE_DOWN,
self::OPERATIONAL_STATE_STOPPING,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['admin_state'] = isset($data['admin_state']) ? $data['admin_state'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['operational_state'] = isset($data['operational_state']) ? $data['operational_state'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAdminStateAllowableValues();
        if (!is_null($this->container['admin_state']) && !in_array($this->container['admin_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'admin_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOperationalStateAllowableValues();
        if (!is_null($this->container['operational_state']) && !in_array($this->container['operational_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operational_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets admin_state
     *
     * @return string
     */
    public function getAdminState()
    {
        return $this->container['admin_state'];
    }

    /**
     * Sets admin_state
     *
     * @param string $admin_state admin_state
     *
     * @return $this
     */
    public function setAdminState($admin_state)
    {
        $allowedValues = $this->getAdminStateAllowableValues();
        if (!is_null($admin_state) && !in_array($admin_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'admin_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['admin_state'] = $admin_state;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operational_state
     *
     * @return string
     */
    public function getOperationalState()
    {
        return $this->container['operational_state'];
    }

    /**
     * Sets operational_state
     *
     * @param string $operational_state operational_state
     *
     * @return $this
     */
    public function setOperationalState($operational_state)
    {
        $allowedValues = $this->getOperationalStateAllowableValues();
        if (!is_null($operational_state) && !in_array($operational_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operational_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operational_state'] = $operational_state;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
