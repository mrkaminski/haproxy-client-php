<?php
/**
 * Cookie
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2.0
 * Contact: support@haproxy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Cookie Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Cookie implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'cookie';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'domain' => 'string[]',
'dynamic' => 'bool',
'httponly' => 'bool',
'indirect' => 'bool',
'maxidle' => 'int',
'maxlife' => 'int',
'name' => 'string',
'nocache' => 'bool',
'postonly' => 'bool',
'preserve' => 'bool',
'secure' => 'bool',
'type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'domain' => null,
'dynamic' => null,
'httponly' => null,
'indirect' => null,
'maxidle' => null,
'maxlife' => null,
'name' => null,
'nocache' => null,
'postonly' => null,
'preserve' => null,
'secure' => null,
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
'dynamic' => 'dynamic',
'httponly' => 'httponly',
'indirect' => 'indirect',
'maxidle' => 'maxidle',
'maxlife' => 'maxlife',
'name' => 'name',
'nocache' => 'nocache',
'postonly' => 'postonly',
'preserve' => 'preserve',
'secure' => 'secure',
'type' => 'type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
'dynamic' => 'setDynamic',
'httponly' => 'setHttponly',
'indirect' => 'setIndirect',
'maxidle' => 'setMaxidle',
'maxlife' => 'setMaxlife',
'name' => 'setName',
'nocache' => 'setNocache',
'postonly' => 'setPostonly',
'preserve' => 'setPreserve',
'secure' => 'setSecure',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
'dynamic' => 'getDynamic',
'httponly' => 'getHttponly',
'indirect' => 'getIndirect',
'maxidle' => 'getMaxidle',
'maxlife' => 'getMaxlife',
'name' => 'getName',
'nocache' => 'getNocache',
'postonly' => 'getPostonly',
'preserve' => 'getPreserve',
'secure' => 'getSecure',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_REWRITE = 'rewrite';
const TYPE_INSERT = 'insert';
const TYPE_PREFIX = 'prefix';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_REWRITE,
self::TYPE_INSERT,
self::TYPE_PREFIX,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['dynamic'] = isset($data['dynamic']) ? $data['dynamic'] : null;
        $this->container['httponly'] = isset($data['httponly']) ? $data['httponly'] : null;
        $this->container['indirect'] = isset($data['indirect']) ? $data['indirect'] : null;
        $this->container['maxidle'] = isset($data['maxidle']) ? $data['maxidle'] : null;
        $this->container['maxlife'] = isset($data['maxlife']) ? $data['maxlife'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['nocache'] = isset($data['nocache']) ? $data['nocache'] : null;
        $this->container['postonly'] = isset($data['postonly']) ? $data['postonly'] : null;
        $this->container['preserve'] = isset($data['preserve']) ? $data['preserve'] : null;
        $this->container['secure'] = isset($data['secure']) ? $data['secure'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string[]
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string[] $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets dynamic
     *
     * @return bool
     */
    public function getDynamic()
    {
        return $this->container['dynamic'];
    }

    /**
     * Sets dynamic
     *
     * @param bool $dynamic dynamic
     *
     * @return $this
     */
    public function setDynamic($dynamic)
    {
        $this->container['dynamic'] = $dynamic;

        return $this;
    }

    /**
     * Gets httponly
     *
     * @return bool
     */
    public function getHttponly()
    {
        return $this->container['httponly'];
    }

    /**
     * Sets httponly
     *
     * @param bool $httponly httponly
     *
     * @return $this
     */
    public function setHttponly($httponly)
    {
        $this->container['httponly'] = $httponly;

        return $this;
    }

    /**
     * Gets indirect
     *
     * @return bool
     */
    public function getIndirect()
    {
        return $this->container['indirect'];
    }

    /**
     * Sets indirect
     *
     * @param bool $indirect indirect
     *
     * @return $this
     */
    public function setIndirect($indirect)
    {
        $this->container['indirect'] = $indirect;

        return $this;
    }

    /**
     * Gets maxidle
     *
     * @return int
     */
    public function getMaxidle()
    {
        return $this->container['maxidle'];
    }

    /**
     * Sets maxidle
     *
     * @param int $maxidle maxidle
     *
     * @return $this
     */
    public function setMaxidle($maxidle)
    {
        $this->container['maxidle'] = $maxidle;

        return $this;
    }

    /**
     * Gets maxlife
     *
     * @return int
     */
    public function getMaxlife()
    {
        return $this->container['maxlife'];
    }

    /**
     * Sets maxlife
     *
     * @param int $maxlife maxlife
     *
     * @return $this
     */
    public function setMaxlife($maxlife)
    {
        $this->container['maxlife'] = $maxlife;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nocache
     *
     * @return bool
     */
    public function getNocache()
    {
        return $this->container['nocache'];
    }

    /**
     * Sets nocache
     *
     * @param bool $nocache nocache
     *
     * @return $this
     */
    public function setNocache($nocache)
    {
        $this->container['nocache'] = $nocache;

        return $this;
    }

    /**
     * Gets postonly
     *
     * @return bool
     */
    public function getPostonly()
    {
        return $this->container['postonly'];
    }

    /**
     * Sets postonly
     *
     * @param bool $postonly postonly
     *
     * @return $this
     */
    public function setPostonly($postonly)
    {
        $this->container['postonly'] = $postonly;

        return $this;
    }

    /**
     * Gets preserve
     *
     * @return bool
     */
    public function getPreserve()
    {
        return $this->container['preserve'];
    }

    /**
     * Sets preserve
     *
     * @param bool $preserve preserve
     *
     * @return $this
     */
    public function setPreserve($preserve)
    {
        $this->container['preserve'] = $preserve;

        return $this;
    }

    /**
     * Gets secure
     *
     * @return bool
     */
    public function getSecure()
    {
        return $this->container['secure'];
    }

    /**
     * Sets secure
     *
     * @param bool $secure secure
     *
     * @return $this
     */
    public function setSecure($secure)
    {
        $this->container['secure'] = $secure;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
