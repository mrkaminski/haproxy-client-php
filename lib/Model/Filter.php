<?php
/**
 * Filter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2.0
 * Contact: support@haproxy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Filter Class Doc Comment
 *
 * @category Class
 * @description HAProxy filters
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Filter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'filter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cache_name' => 'string',
'id' => 'int',
'spoe_config' => 'string',
'spoe_engine' => 'string',
'trace_hexdump' => 'bool',
'trace_name' => 'string',
'trace_rnd_forwarding' => 'bool',
'trace_rnd_parsing' => 'bool',
'type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cache_name' => null,
'id' => null,
'spoe_config' => null,
'spoe_engine' => null,
'trace_hexdump' => null,
'trace_name' => null,
'trace_rnd_forwarding' => null,
'trace_rnd_parsing' => null,
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cache_name' => 'cache_name',
'id' => 'id',
'spoe_config' => 'spoe_config',
'spoe_engine' => 'spoe_engine',
'trace_hexdump' => 'trace_hexdump',
'trace_name' => 'trace_name',
'trace_rnd_forwarding' => 'trace_rnd_forwarding',
'trace_rnd_parsing' => 'trace_rnd_parsing',
'type' => 'type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cache_name' => 'setCacheName',
'id' => 'setId',
'spoe_config' => 'setSpoeConfig',
'spoe_engine' => 'setSpoeEngine',
'trace_hexdump' => 'setTraceHexdump',
'trace_name' => 'setTraceName',
'trace_rnd_forwarding' => 'setTraceRndForwarding',
'trace_rnd_parsing' => 'setTraceRndParsing',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cache_name' => 'getCacheName',
'id' => 'getId',
'spoe_config' => 'getSpoeConfig',
'spoe_engine' => 'getSpoeEngine',
'trace_hexdump' => 'getTraceHexdump',
'trace_name' => 'getTraceName',
'trace_rnd_forwarding' => 'getTraceRndForwarding',
'trace_rnd_parsing' => 'getTraceRndParsing',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_TRACE = 'trace';
const TYPE_COMPRESSION = 'compression';
const TYPE_SPOE = 'spoe';
const TYPE_CACHE = 'cache';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TRACE,
self::TYPE_COMPRESSION,
self::TYPE_SPOE,
self::TYPE_CACHE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cache_name'] = isset($data['cache_name']) ? $data['cache_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['spoe_config'] = isset($data['spoe_config']) ? $data['spoe_config'] : null;
        $this->container['spoe_engine'] = isset($data['spoe_engine']) ? $data['spoe_engine'] : null;
        $this->container['trace_hexdump'] = isset($data['trace_hexdump']) ? $data['trace_hexdump'] : null;
        $this->container['trace_name'] = isset($data['trace_name']) ? $data['trace_name'] : null;
        $this->container['trace_rnd_forwarding'] = isset($data['trace_rnd_forwarding']) ? $data['trace_rnd_forwarding'] : null;
        $this->container['trace_rnd_parsing'] = isset($data['trace_rnd_parsing']) ? $data['trace_rnd_parsing'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cache_name
     *
     * @return string
     */
    public function getCacheName()
    {
        return $this->container['cache_name'];
    }

    /**
     * Sets cache_name
     *
     * @param string $cache_name cache_name
     *
     * @return $this
     */
    public function setCacheName($cache_name)
    {
        $this->container['cache_name'] = $cache_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets spoe_config
     *
     * @return string
     */
    public function getSpoeConfig()
    {
        return $this->container['spoe_config'];
    }

    /**
     * Sets spoe_config
     *
     * @param string $spoe_config spoe_config
     *
     * @return $this
     */
    public function setSpoeConfig($spoe_config)
    {
        $this->container['spoe_config'] = $spoe_config;

        return $this;
    }

    /**
     * Gets spoe_engine
     *
     * @return string
     */
    public function getSpoeEngine()
    {
        return $this->container['spoe_engine'];
    }

    /**
     * Sets spoe_engine
     *
     * @param string $spoe_engine spoe_engine
     *
     * @return $this
     */
    public function setSpoeEngine($spoe_engine)
    {
        $this->container['spoe_engine'] = $spoe_engine;

        return $this;
    }

    /**
     * Gets trace_hexdump
     *
     * @return bool
     */
    public function getTraceHexdump()
    {
        return $this->container['trace_hexdump'];
    }

    /**
     * Sets trace_hexdump
     *
     * @param bool $trace_hexdump trace_hexdump
     *
     * @return $this
     */
    public function setTraceHexdump($trace_hexdump)
    {
        $this->container['trace_hexdump'] = $trace_hexdump;

        return $this;
    }

    /**
     * Gets trace_name
     *
     * @return string
     */
    public function getTraceName()
    {
        return $this->container['trace_name'];
    }

    /**
     * Sets trace_name
     *
     * @param string $trace_name trace_name
     *
     * @return $this
     */
    public function setTraceName($trace_name)
    {
        $this->container['trace_name'] = $trace_name;

        return $this;
    }

    /**
     * Gets trace_rnd_forwarding
     *
     * @return bool
     */
    public function getTraceRndForwarding()
    {
        return $this->container['trace_rnd_forwarding'];
    }

    /**
     * Sets trace_rnd_forwarding
     *
     * @param bool $trace_rnd_forwarding trace_rnd_forwarding
     *
     * @return $this
     */
    public function setTraceRndForwarding($trace_rnd_forwarding)
    {
        $this->container['trace_rnd_forwarding'] = $trace_rnd_forwarding;

        return $this;
    }

    /**
     * Gets trace_rnd_parsing
     *
     * @return bool
     */
    public function getTraceRndParsing()
    {
        return $this->container['trace_rnd_parsing'];
    }

    /**
     * Sets trace_rnd_parsing
     *
     * @param bool $trace_rnd_parsing trace_rnd_parsing
     *
     * @return $this
     */
    public function setTraceRndParsing($trace_rnd_parsing)
    {
        $this->container['trace_rnd_parsing'] = $trace_rnd_parsing;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
