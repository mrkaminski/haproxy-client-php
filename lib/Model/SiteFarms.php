<?php
/**
 * SiteFarms
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2.0
 * Contact: support@haproxy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SiteFarms Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SiteFarms implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'site_farms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'balance' => '\Swagger\Client\Model\Balance',
'cond' => 'string',
'cond_test' => 'string',
'forwardfor' => '\Swagger\Client\Model\Forwardfor',
'mode' => 'string',
'name' => 'string',
'servers' => '\Swagger\Client\Model\Server[]',
'use_as' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'balance' => null,
'cond' => null,
'cond_test' => null,
'forwardfor' => null,
'mode' => null,
'name' => null,
'servers' => null,
'use_as' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'balance' => 'balance',
'cond' => 'cond',
'cond_test' => 'cond_test',
'forwardfor' => 'forwardfor',
'mode' => 'mode',
'name' => 'name',
'servers' => 'servers',
'use_as' => 'use_as'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'balance' => 'setBalance',
'cond' => 'setCond',
'cond_test' => 'setCondTest',
'forwardfor' => 'setForwardfor',
'mode' => 'setMode',
'name' => 'setName',
'servers' => 'setServers',
'use_as' => 'setUseAs'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'balance' => 'getBalance',
'cond' => 'getCond',
'cond_test' => 'getCondTest',
'forwardfor' => 'getForwardfor',
'mode' => 'getMode',
'name' => 'getName',
'servers' => 'getServers',
'use_as' => 'getUseAs'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const COND__IF = 'if';
const COND_UNLESS = 'unless';
const MODE_HTTP = 'http';
const MODE_TCP = 'tcp';
const USE_AS__DEFAULT = 'default';
const USE_AS_CONDITIONAL = 'conditional';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCondAllowableValues()
    {
        return [
            self::COND__IF,
self::COND_UNLESS,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_HTTP,
self::MODE_TCP,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseAsAllowableValues()
    {
        return [
            self::USE_AS__DEFAULT,
self::USE_AS_CONDITIONAL,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['cond'] = isset($data['cond']) ? $data['cond'] : null;
        $this->container['cond_test'] = isset($data['cond_test']) ? $data['cond_test'] : null;
        $this->container['forwardfor'] = isset($data['forwardfor']) ? $data['forwardfor'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['servers'] = isset($data['servers']) ? $data['servers'] : null;
        $this->container['use_as'] = isset($data['use_as']) ? $data['use_as'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCondAllowableValues();
        if (!is_null($this->container['cond']) && !in_array($this->container['cond'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cond', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['use_as'] === null) {
            $invalidProperties[] = "'use_as' can't be null";
        }
        $allowedValues = $this->getUseAsAllowableValues();
        if (!is_null($this->container['use_as']) && !in_array($this->container['use_as'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'use_as', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets balance
     *
     * @return \Swagger\Client\Model\Balance
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param \Swagger\Client\Model\Balance $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets cond
     *
     * @return string
     */
    public function getCond()
    {
        return $this->container['cond'];
    }

    /**
     * Sets cond
     *
     * @param string $cond cond
     *
     * @return $this
     */
    public function setCond($cond)
    {
        $allowedValues = $this->getCondAllowableValues();
        if (!is_null($cond) && !in_array($cond, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cond', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cond'] = $cond;

        return $this;
    }

    /**
     * Gets cond_test
     *
     * @return string
     */
    public function getCondTest()
    {
        return $this->container['cond_test'];
    }

    /**
     * Sets cond_test
     *
     * @param string $cond_test cond_test
     *
     * @return $this
     */
    public function setCondTest($cond_test)
    {
        $this->container['cond_test'] = $cond_test;

        return $this;
    }

    /**
     * Gets forwardfor
     *
     * @return \Swagger\Client\Model\Forwardfor
     */
    public function getForwardfor()
    {
        return $this->container['forwardfor'];
    }

    /**
     * Sets forwardfor
     *
     * @param \Swagger\Client\Model\Forwardfor $forwardfor forwardfor
     *
     * @return $this
     */
    public function setForwardfor($forwardfor)
    {
        $this->container['forwardfor'] = $forwardfor;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode mode
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets servers
     *
     * @return \Swagger\Client\Model\Server[]
     */
    public function getServers()
    {
        return $this->container['servers'];
    }

    /**
     * Sets servers
     *
     * @param \Swagger\Client\Model\Server[] $servers servers
     *
     * @return $this
     */
    public function setServers($servers)
    {
        $this->container['servers'] = $servers;

        return $this;
    }

    /**
     * Gets use_as
     *
     * @return string
     */
    public function getUseAs()
    {
        return $this->container['use_as'];
    }

    /**
     * Sets use_as
     *
     * @param string $use_as use_as
     *
     * @return $this
     */
    public function setUseAs($use_as)
    {
        $allowedValues = $this->getUseAsAllowableValues();
        if (!in_array($use_as, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'use_as', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['use_as'] = $use_as;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
