<?php
/**
 * ModelGlobal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2.0
 * Contact: support@haproxy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelGlobal Class Doc Comment
 *
 * @category Class
 * @description HAProxy global configuration
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelGlobal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = '_global';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cpu_maps' => '\Swagger\Client\Model\GlobalCpuMaps[]',
'daemon' => 'string',
'external_check' => 'bool',
'master_worker' => 'bool',
'maxconn' => 'int',
'nbproc' => 'int',
'nbthread' => 'int',
'pidfile' => 'string',
'runtime_apis' => '\Swagger\Client\Model\GlobalRuntimeApis[]',
'ssl_default_bind_ciphers' => 'string',
'ssl_default_bind_options' => 'string',
'stats_timeout' => 'int',
'tune_ssl_default_dh_param' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cpu_maps' => null,
'daemon' => null,
'external_check' => null,
'master_worker' => null,
'maxconn' => null,
'nbproc' => null,
'nbthread' => null,
'pidfile' => null,
'runtime_apis' => null,
'ssl_default_bind_ciphers' => null,
'ssl_default_bind_options' => null,
'stats_timeout' => null,
'tune_ssl_default_dh_param' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu_maps' => 'cpu_maps',
'daemon' => 'daemon',
'external_check' => 'external_check',
'master_worker' => 'master-worker',
'maxconn' => 'maxconn',
'nbproc' => 'nbproc',
'nbthread' => 'nbthread',
'pidfile' => 'pidfile',
'runtime_apis' => 'runtime_apis',
'ssl_default_bind_ciphers' => 'ssl_default_bind_ciphers',
'ssl_default_bind_options' => 'ssl_default_bind_options',
'stats_timeout' => 'stats_timeout',
'tune_ssl_default_dh_param' => 'tune_ssl_default_dh_param'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu_maps' => 'setCpuMaps',
'daemon' => 'setDaemon',
'external_check' => 'setExternalCheck',
'master_worker' => 'setMasterWorker',
'maxconn' => 'setMaxconn',
'nbproc' => 'setNbproc',
'nbthread' => 'setNbthread',
'pidfile' => 'setPidfile',
'runtime_apis' => 'setRuntimeApis',
'ssl_default_bind_ciphers' => 'setSslDefaultBindCiphers',
'ssl_default_bind_options' => 'setSslDefaultBindOptions',
'stats_timeout' => 'setStatsTimeout',
'tune_ssl_default_dh_param' => 'setTuneSslDefaultDhParam'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu_maps' => 'getCpuMaps',
'daemon' => 'getDaemon',
'external_check' => 'getExternalCheck',
'master_worker' => 'getMasterWorker',
'maxconn' => 'getMaxconn',
'nbproc' => 'getNbproc',
'nbthread' => 'getNbthread',
'pidfile' => 'getPidfile',
'runtime_apis' => 'getRuntimeApis',
'ssl_default_bind_ciphers' => 'getSslDefaultBindCiphers',
'ssl_default_bind_options' => 'getSslDefaultBindOptions',
'stats_timeout' => 'getStatsTimeout',
'tune_ssl_default_dh_param' => 'getTuneSslDefaultDhParam'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DAEMON_ENABLED = 'enabled';
const DAEMON_DISABLED = 'disabled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDaemonAllowableValues()
    {
        return [
            self::DAEMON_ENABLED,
self::DAEMON_DISABLED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cpu_maps'] = isset($data['cpu_maps']) ? $data['cpu_maps'] : null;
        $this->container['daemon'] = isset($data['daemon']) ? $data['daemon'] : null;
        $this->container['external_check'] = isset($data['external_check']) ? $data['external_check'] : null;
        $this->container['master_worker'] = isset($data['master_worker']) ? $data['master_worker'] : null;
        $this->container['maxconn'] = isset($data['maxconn']) ? $data['maxconn'] : null;
        $this->container['nbproc'] = isset($data['nbproc']) ? $data['nbproc'] : null;
        $this->container['nbthread'] = isset($data['nbthread']) ? $data['nbthread'] : null;
        $this->container['pidfile'] = isset($data['pidfile']) ? $data['pidfile'] : null;
        $this->container['runtime_apis'] = isset($data['runtime_apis']) ? $data['runtime_apis'] : null;
        $this->container['ssl_default_bind_ciphers'] = isset($data['ssl_default_bind_ciphers']) ? $data['ssl_default_bind_ciphers'] : null;
        $this->container['ssl_default_bind_options'] = isset($data['ssl_default_bind_options']) ? $data['ssl_default_bind_options'] : null;
        $this->container['stats_timeout'] = isset($data['stats_timeout']) ? $data['stats_timeout'] : null;
        $this->container['tune_ssl_default_dh_param'] = isset($data['tune_ssl_default_dh_param']) ? $data['tune_ssl_default_dh_param'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDaemonAllowableValues();
        if (!is_null($this->container['daemon']) && !in_array($this->container['daemon'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'daemon', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu_maps
     *
     * @return \Swagger\Client\Model\GlobalCpuMaps[]
     */
    public function getCpuMaps()
    {
        return $this->container['cpu_maps'];
    }

    /**
     * Sets cpu_maps
     *
     * @param \Swagger\Client\Model\GlobalCpuMaps[] $cpu_maps cpu_maps
     *
     * @return $this
     */
    public function setCpuMaps($cpu_maps)
    {
        $this->container['cpu_maps'] = $cpu_maps;

        return $this;
    }

    /**
     * Gets daemon
     *
     * @return string
     */
    public function getDaemon()
    {
        return $this->container['daemon'];
    }

    /**
     * Sets daemon
     *
     * @param string $daemon daemon
     *
     * @return $this
     */
    public function setDaemon($daemon)
    {
        $allowedValues = $this->getDaemonAllowableValues();
        if (!is_null($daemon) && !in_array($daemon, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'daemon', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['daemon'] = $daemon;

        return $this;
    }

    /**
     * Gets external_check
     *
     * @return bool
     */
    public function getExternalCheck()
    {
        return $this->container['external_check'];
    }

    /**
     * Sets external_check
     *
     * @param bool $external_check external_check
     *
     * @return $this
     */
    public function setExternalCheck($external_check)
    {
        $this->container['external_check'] = $external_check;

        return $this;
    }

    /**
     * Gets master_worker
     *
     * @return bool
     */
    public function getMasterWorker()
    {
        return $this->container['master_worker'];
    }

    /**
     * Sets master_worker
     *
     * @param bool $master_worker master_worker
     *
     * @return $this
     */
    public function setMasterWorker($master_worker)
    {
        $this->container['master_worker'] = $master_worker;

        return $this;
    }

    /**
     * Gets maxconn
     *
     * @return int
     */
    public function getMaxconn()
    {
        return $this->container['maxconn'];
    }

    /**
     * Sets maxconn
     *
     * @param int $maxconn maxconn
     *
     * @return $this
     */
    public function setMaxconn($maxconn)
    {
        $this->container['maxconn'] = $maxconn;

        return $this;
    }

    /**
     * Gets nbproc
     *
     * @return int
     */
    public function getNbproc()
    {
        return $this->container['nbproc'];
    }

    /**
     * Sets nbproc
     *
     * @param int $nbproc nbproc
     *
     * @return $this
     */
    public function setNbproc($nbproc)
    {
        $this->container['nbproc'] = $nbproc;

        return $this;
    }

    /**
     * Gets nbthread
     *
     * @return int
     */
    public function getNbthread()
    {
        return $this->container['nbthread'];
    }

    /**
     * Sets nbthread
     *
     * @param int $nbthread nbthread
     *
     * @return $this
     */
    public function setNbthread($nbthread)
    {
        $this->container['nbthread'] = $nbthread;

        return $this;
    }

    /**
     * Gets pidfile
     *
     * @return string
     */
    public function getPidfile()
    {
        return $this->container['pidfile'];
    }

    /**
     * Sets pidfile
     *
     * @param string $pidfile pidfile
     *
     * @return $this
     */
    public function setPidfile($pidfile)
    {
        $this->container['pidfile'] = $pidfile;

        return $this;
    }

    /**
     * Gets runtime_apis
     *
     * @return \Swagger\Client\Model\GlobalRuntimeApis[]
     */
    public function getRuntimeApis()
    {
        return $this->container['runtime_apis'];
    }

    /**
     * Sets runtime_apis
     *
     * @param \Swagger\Client\Model\GlobalRuntimeApis[] $runtime_apis runtime_apis
     *
     * @return $this
     */
    public function setRuntimeApis($runtime_apis)
    {
        $this->container['runtime_apis'] = $runtime_apis;

        return $this;
    }

    /**
     * Gets ssl_default_bind_ciphers
     *
     * @return string
     */
    public function getSslDefaultBindCiphers()
    {
        return $this->container['ssl_default_bind_ciphers'];
    }

    /**
     * Sets ssl_default_bind_ciphers
     *
     * @param string $ssl_default_bind_ciphers ssl_default_bind_ciphers
     *
     * @return $this
     */
    public function setSslDefaultBindCiphers($ssl_default_bind_ciphers)
    {
        $this->container['ssl_default_bind_ciphers'] = $ssl_default_bind_ciphers;

        return $this;
    }

    /**
     * Gets ssl_default_bind_options
     *
     * @return string
     */
    public function getSslDefaultBindOptions()
    {
        return $this->container['ssl_default_bind_options'];
    }

    /**
     * Sets ssl_default_bind_options
     *
     * @param string $ssl_default_bind_options ssl_default_bind_options
     *
     * @return $this
     */
    public function setSslDefaultBindOptions($ssl_default_bind_options)
    {
        $this->container['ssl_default_bind_options'] = $ssl_default_bind_options;

        return $this;
    }

    /**
     * Gets stats_timeout
     *
     * @return int
     */
    public function getStatsTimeout()
    {
        return $this->container['stats_timeout'];
    }

    /**
     * Sets stats_timeout
     *
     * @param int $stats_timeout stats_timeout
     *
     * @return $this
     */
    public function setStatsTimeout($stats_timeout)
    {
        $this->container['stats_timeout'] = $stats_timeout;

        return $this;
    }

    /**
     * Gets tune_ssl_default_dh_param
     *
     * @return int
     */
    public function getTuneSslDefaultDhParam()
    {
        return $this->container['tune_ssl_default_dh_param'];
    }

    /**
     * Sets tune_ssl_default_dh_param
     *
     * @param int $tune_ssl_default_dh_param tune_ssl_default_dh_param
     *
     * @return $this
     */
    public function setTuneSslDefaultDhParam($tune_ssl_default_dh_param)
    {
        $this->container['tune_ssl_default_dh_param'] = $tune_ssl_default_dh_param;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
