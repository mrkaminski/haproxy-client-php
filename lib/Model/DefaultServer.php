<?php
/**
 * DefaultServer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2.0
 * Contact: support@haproxy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultServer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultServer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'default_server';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'check_sni' => 'string',
'check_ssl' => 'string',
'downinter' => 'int',
'fall' => 'int',
'fastinter' => 'int',
'init_addr' => 'string',
'inter' => 'int',
'port' => 'int',
'rise' => 'int',
'sni' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'check_sni' => null,
'check_ssl' => null,
'downinter' => null,
'fall' => null,
'fastinter' => null,
'init_addr' => null,
'inter' => null,
'port' => null,
'rise' => null,
'sni' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'check_sni' => 'check-sni',
'check_ssl' => 'check-ssl',
'downinter' => 'downinter',
'fall' => 'fall',
'fastinter' => 'fastinter',
'init_addr' => 'init-addr',
'inter' => 'inter',
'port' => 'port',
'rise' => 'rise',
'sni' => 'sni'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'check_sni' => 'setCheckSni',
'check_ssl' => 'setCheckSsl',
'downinter' => 'setDowninter',
'fall' => 'setFall',
'fastinter' => 'setFastinter',
'init_addr' => 'setInitAddr',
'inter' => 'setInter',
'port' => 'setPort',
'rise' => 'setRise',
'sni' => 'setSni'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'check_sni' => 'getCheckSni',
'check_ssl' => 'getCheckSsl',
'downinter' => 'getDowninter',
'fall' => 'getFall',
'fastinter' => 'getFastinter',
'init_addr' => 'getInitAddr',
'inter' => 'getInter',
'port' => 'getPort',
'rise' => 'getRise',
'sni' => 'getSni'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHECK_SSL_ENABLED = 'enabled';
const CHECK_SSL_DISABLED = 'disabled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckSslAllowableValues()
    {
        return [
            self::CHECK_SSL_ENABLED,
self::CHECK_SSL_DISABLED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['check_sni'] = isset($data['check_sni']) ? $data['check_sni'] : null;
        $this->container['check_ssl'] = isset($data['check_ssl']) ? $data['check_ssl'] : null;
        $this->container['downinter'] = isset($data['downinter']) ? $data['downinter'] : null;
        $this->container['fall'] = isset($data['fall']) ? $data['fall'] : null;
        $this->container['fastinter'] = isset($data['fastinter']) ? $data['fastinter'] : null;
        $this->container['init_addr'] = isset($data['init_addr']) ? $data['init_addr'] : null;
        $this->container['inter'] = isset($data['inter']) ? $data['inter'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['rise'] = isset($data['rise']) ? $data['rise'] : null;
        $this->container['sni'] = isset($data['sni']) ? $data['sni'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCheckSslAllowableValues();
        if (!is_null($this->container['check_ssl']) && !in_array($this->container['check_ssl'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'check_ssl', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets check_sni
     *
     * @return string
     */
    public function getCheckSni()
    {
        return $this->container['check_sni'];
    }

    /**
     * Sets check_sni
     *
     * @param string $check_sni check_sni
     *
     * @return $this
     */
    public function setCheckSni($check_sni)
    {
        $this->container['check_sni'] = $check_sni;

        return $this;
    }

    /**
     * Gets check_ssl
     *
     * @return string
     */
    public function getCheckSsl()
    {
        return $this->container['check_ssl'];
    }

    /**
     * Sets check_ssl
     *
     * @param string $check_ssl check_ssl
     *
     * @return $this
     */
    public function setCheckSsl($check_ssl)
    {
        $allowedValues = $this->getCheckSslAllowableValues();
        if (!is_null($check_ssl) && !in_array($check_ssl, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'check_ssl', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['check_ssl'] = $check_ssl;

        return $this;
    }

    /**
     * Gets downinter
     *
     * @return int
     */
    public function getDowninter()
    {
        return $this->container['downinter'];
    }

    /**
     * Sets downinter
     *
     * @param int $downinter downinter
     *
     * @return $this
     */
    public function setDowninter($downinter)
    {
        $this->container['downinter'] = $downinter;

        return $this;
    }

    /**
     * Gets fall
     *
     * @return int
     */
    public function getFall()
    {
        return $this->container['fall'];
    }

    /**
     * Sets fall
     *
     * @param int $fall fall
     *
     * @return $this
     */
    public function setFall($fall)
    {
        $this->container['fall'] = $fall;

        return $this;
    }

    /**
     * Gets fastinter
     *
     * @return int
     */
    public function getFastinter()
    {
        return $this->container['fastinter'];
    }

    /**
     * Sets fastinter
     *
     * @param int $fastinter fastinter
     *
     * @return $this
     */
    public function setFastinter($fastinter)
    {
        $this->container['fastinter'] = $fastinter;

        return $this;
    }

    /**
     * Gets init_addr
     *
     * @return string
     */
    public function getInitAddr()
    {
        return $this->container['init_addr'];
    }

    /**
     * Sets init_addr
     *
     * @param string $init_addr init_addr
     *
     * @return $this
     */
    public function setInitAddr($init_addr)
    {
        $this->container['init_addr'] = $init_addr;

        return $this;
    }

    /**
     * Gets inter
     *
     * @return int
     */
    public function getInter()
    {
        return $this->container['inter'];
    }

    /**
     * Sets inter
     *
     * @param int $inter inter
     *
     * @return $this
     */
    public function setInter($inter)
    {
        $this->container['inter'] = $inter;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets rise
     *
     * @return int
     */
    public function getRise()
    {
        return $this->container['rise'];
    }

    /**
     * Sets rise
     *
     * @param int $rise rise
     *
     * @return $this
     */
    public function setRise($rise)
    {
        $this->container['rise'] = $rise;

        return $this;
    }

    /**
     * Gets sni
     *
     * @return string
     */
    public function getSni()
    {
        return $this->container['sni'];
    }

    /**
     * Sets sni
     *
     * @param string $sni sni
     *
     * @return $this
     */
    public function setSni($sni)
    {
        $this->container['sni'] = $sni;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
