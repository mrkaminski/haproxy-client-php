<?php
/**
 * SiteService
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2.0
 * Contact: support@haproxy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SiteService Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SiteService implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'site_service';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'http_connection_mode' => 'string',
'listeners' => '\Swagger\Client\Model\Bind[]',
'maxconn' => 'int',
'mode' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'http_connection_mode' => null,
'listeners' => null,
'maxconn' => null,
'mode' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'http_connection_mode' => 'http_connection_mode',
'listeners' => 'listeners',
'maxconn' => 'maxconn',
'mode' => 'mode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'http_connection_mode' => 'setHttpConnectionMode',
'listeners' => 'setListeners',
'maxconn' => 'setMaxconn',
'mode' => 'setMode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'http_connection_mode' => 'getHttpConnectionMode',
'listeners' => 'getListeners',
'maxconn' => 'getMaxconn',
'mode' => 'getMode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const HTTP_CONNECTION_MODE_HTTP_TUNNEL = 'http-tunnel';
const HTTP_CONNECTION_MODE_HTTPCLOSE = 'httpclose';
const HTTP_CONNECTION_MODE_FORCED_CLOSE = 'forced-close';
const HTTP_CONNECTION_MODE_HTTP_SERVER_CLOSE = 'http-server-close';
const HTTP_CONNECTION_MODE_HTTP_KEEP_ALIVE = 'http-keep-alive';
const MODE_HTTP = 'http';
const MODE_TCP = 'tcp';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHttpConnectionModeAllowableValues()
    {
        return [
            self::HTTP_CONNECTION_MODE_HTTP_TUNNEL,
self::HTTP_CONNECTION_MODE_HTTPCLOSE,
self::HTTP_CONNECTION_MODE_FORCED_CLOSE,
self::HTTP_CONNECTION_MODE_HTTP_SERVER_CLOSE,
self::HTTP_CONNECTION_MODE_HTTP_KEEP_ALIVE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_HTTP,
self::MODE_TCP,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['http_connection_mode'] = isset($data['http_connection_mode']) ? $data['http_connection_mode'] : null;
        $this->container['listeners'] = isset($data['listeners']) ? $data['listeners'] : null;
        $this->container['maxconn'] = isset($data['maxconn']) ? $data['maxconn'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHttpConnectionModeAllowableValues();
        if (!is_null($this->container['http_connection_mode']) && !in_array($this->container['http_connection_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'http_connection_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets http_connection_mode
     *
     * @return string
     */
    public function getHttpConnectionMode()
    {
        return $this->container['http_connection_mode'];
    }

    /**
     * Sets http_connection_mode
     *
     * @param string $http_connection_mode http_connection_mode
     *
     * @return $this
     */
    public function setHttpConnectionMode($http_connection_mode)
    {
        $allowedValues = $this->getHttpConnectionModeAllowableValues();
        if (!is_null($http_connection_mode) && !in_array($http_connection_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'http_connection_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['http_connection_mode'] = $http_connection_mode;

        return $this;
    }

    /**
     * Gets listeners
     *
     * @return \Swagger\Client\Model\Bind[]
     */
    public function getListeners()
    {
        return $this->container['listeners'];
    }

    /**
     * Sets listeners
     *
     * @param \Swagger\Client\Model\Bind[] $listeners listeners
     *
     * @return $this
     */
    public function setListeners($listeners)
    {
        $this->container['listeners'] = $listeners;

        return $this;
    }

    /**
     * Gets maxconn
     *
     * @return int
     */
    public function getMaxconn()
    {
        return $this->container['maxconn'];
    }

    /**
     * Sets maxconn
     *
     * @param int $maxconn maxconn
     *
     * @return $this
     */
    public function setMaxconn($maxconn)
    {
        $this->container['maxconn'] = $maxconn;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode mode
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
